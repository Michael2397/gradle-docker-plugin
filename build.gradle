buildscript {
  // inspired by https://github.com/Netflix/gradle-template
  apply from: file('gradle/buildscript.gradle'), to: buildscript
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: 'groovy'

apply plugin: 'idea'

apply plugin: 'cobertura'
apply plugin: 'coveralls'

idea {
  module {
    testSourceDirs += file('src/integrationTest/groovy')
    testSourceDirs += file('src/integrationTest/resources')
  }
}

sourceSets {
  integrationTest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
    groovy {
      srcDir 'src/integrationTest/groovy'
    }
    resources {
      srcDir 'src/integrationTest/resources'
    }
  }
}

cobertura.coverageSourceDirs = sourceSets.main.groovy.srcDirs

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

def versionOverrides = [
    'org.hamcrest:hamcrest-core': '1.3',
    'org.slf4j:slf4j-api'       : '1.6.6',
    'org.yaml:snakeyaml'        : '1.10',
    'xerces:xmlParserAPIs'      : '2.6.2',
    'xerces:xercesImpl'         : '2.6.2',
    'xml-apis:xml-apis'         : '2.0.2'
]

dependencies {
  compile gradleApi()
  compile localGroovy()

  compile 'org.apache.commons:commons-compress:1.8'

  testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'
  testCompile 'co.freeside:betamax:1.1.2'
  testCompile 'org.yaml:snakeyaml:1.10'
}

// remove dependencies of gradle core/plugins
sourceSets {
  main {
    compileClasspath = compileClasspath.filter {
      !it.name.contains("snakeyaml-1.6")
    }
  }
}
// remove dependencies of gradle core/plugins
test.doFirst {
  classpath = classpath.filter {
    !it.name.contains("snakeyaml-1.6")
  }
}

configurations.all {
  resolutionStrategy {
    failOnVersionConflict()
    force versionOverrides.collect { k, v -> "$k:$v" }
  }
}

task integrationTest(type: Test) {
  group = 'verification'
  description = 'Runs the integration tests.'
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}
integrationTest.mustRunAfter test
check.dependsOn(integrationTest)

task aggregateTestReports(type: TestReport) {
  destinationDir = test.reports.html.destination
  reportOn test, integrationTest
}
aggregateTestReports.mustRunAfter integrationTest
check.dependsOn aggregateTestReports

cobertura.coverageFormats = ['html', 'xml']

task wrapper(type: Wrapper) {
  gradleVersion = '1.12'
  distributionUrl = 'http://services.gradle.org/distributions/gradle-1.12-all.zip'
}
